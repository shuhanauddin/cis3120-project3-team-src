# -*- coding: utf-8 -*-
"""pull_exercises.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GWyp8lCD_wvLHC5dYMQ_gAfEmVc2oUUp
"""

!pip install requests

!pip install python-dotenv

from google.colab import files
uploaded = files.upload()  #Select my .env

#I did this because the .env would not upload properly
with open(".env", "w") as f:
    f.write("API_KEY=JUQZNe1cWZOx//Za33Y4Vw==8HKjd8kaR6LwQsGW")

from dotenv import load_dotenv
import os

load_dotenv()  # Load from .env file

# Load the key
api_key = os.getenv("API_KEY")
headers = {"X-Api-Key": api_key}

# Print to check that it works
print("Loaded key:", api_key)

!pip install python-dotenv

from dotenv import load_dotenv
import os
import requests
import json

load_dotenv()

# API Setup
api_ninjas_key = os.getenv("API_KEY")
headers = {'X-Api-Key': api_key}


strength_exercises = {}
cardio_exercises = []
flexibility_exercises = []

# Flexibility-related muscles
flexibility_muscles = ['abdominals', 'lower_back', 'neck', 'calves', 'hamstrings', 'glutes']

# Flexibility keywords
flexibility_keywords = ['stretch', 'plank']

# Pull strength exercises
url_strength = 'https://api.api-ninjas.com/v1/exercises?type=strength&limit=100'
response_strength = requests.get(url_strength, headers=headers)

if response_strength.status_code == 200:
    strength_data = response_strength.json()
    for exercise in strength_data:
        name_lower = exercise['name'].lower()
        muscle = exercise['muscle'].lower()

        if muscle in flexibility_muscles and any(keyword in name_lower for keyword in flexibility_keywords):
            flexibility_exercises.append(exercise)
        else:
            if muscle not in strength_exercises:
                strength_exercises[muscle] = []
            strength_exercises[muscle].append(exercise)
else:
    print(f"Error pulling strength exercises: {response_strength.status_code}")

# Pull cardio exercises
url_cardio = 'https://api.api-ninjas.com/v1/exercises?type=cardio&limit=100'
response_cardio = requests.get(url_cardio, headers=headers)

if response_cardio.status_code == 200:
    cardio_data = response_cardio.json()
    cardio_exercises.extend(cardio_data)
else:
    print(f"Error pulling cardio exercises: {response_cardio.status_code}")

# Pull more flexibility exercises
for muscle in flexibility_muscles:
    url_flex = f'https://api.api-ninjas.com/v1/exercises?muscle={muscle}&limit=100'
    response_flex = requests.get(url_flex, headers=headers)
    if response_flex.status_code == 200:
        flex_data = response_flex.json()
        for exercise in flex_data:
            name_lower = exercise['name'].lower()
            muscle_name = exercise['muscle'].lower()

            if any(keyword in name_lower for keyword in flexibility_keywords):
                flexibility_exercises.append(exercise)
            else:
                if muscle_name not in strength_exercises:
                    strength_exercises[muscle_name] = []
                strength_exercises[muscle_name].append(exercise)
    else:
        print(f"Error pulling flexibility exercises for {muscle}: {response_flex.status_code}")

# Help with deplication problen
def deduplicate_by_name(exercise_list):
    seen = set()
    unique = []
    for ex in exercise_list:
        if 'name' in ex and ex['name']:
            name = ex['name'].lower().strip()
            if name not in seen:
                unique.append(ex)
                seen.add(name)
    return unique

def deduplicate_strength_dict(strength_dict):
    deduped = {}
    for muscle, exercises in strength_dict.items():
        deduped[muscle] = deduplicate_by_name(exercises)
    return deduped

strength_exercises = deduplicate_strength_dict(strength_exercises)
cardio_exercises = deduplicate_by_name(cardio_exercises)
flexibility_exercises = deduplicate_by_name(flexibility_exercises)

# Save to JSON
all_exercises = {
    "strength": strength_exercises,
    "cardio": cardio_exercises,
    "flexibility": flexibility_exercises
}

with open('all_exercises.json', 'w') as f:
    json.dump(all_exercises, f, indent=4)

# ===== Final Summary =====
total_strength = sum(len(exs) for exs in strength_exercises.values())
print(f"Saved {total_strength} unique strength exercises (by muscle)")
print(f"Saved {len(cardio_exercises)} unique cardio exercises")
print(f"Saved {len(flexibility_exercises)} unique flexibility exercises")
print("All exercises saved to all_exercises.json")